Kusterskiy Dmitriy
Lapin Andrew
Markeeva Larisa
Usvyatsov Mikhail

Exercises 3.7  (4 point)

Give the initial state, goal test, successor function, and cost function for each of the
following. Choose a formulation that is precise enough to be implemented.

A) You have to color a planar map using only four colors, in such a way that no two
adjacent regions have the same color.

Initial state - uncolored map
goal test - planar map doesn't have adjacent regions colored with the same colour and each region is colored with one of 4 colours.
successor function - assign color to region
cost function - number of colored regions

B) A 3-foot-tall monkey is in a room where some bananas are suspended from the 8-foot
ceiling. He would like to get the bananas. The room contains two stackable, movable,
climbable 3-foot-high crates.

Initial state - monkey is on the floor, crates are on the floor.
goal test - monkey has bananna
successor function - [take bananna, move crate, jump on/off crate, take crate on/off the crate]
cost function - nomber of actions to reach bananna

C) You have a program that outputs the message "illegal input record" when fed a certain
file of input records. You know that processing of each record is independent of the
other records. You want to discover what record is illegal.

Initial state - a set of records with undefined status
goal test - is a single record illegal
successor function - [process record]
cost function - constant value per step

D) You have three jugs, measuring 12 gallons, 8 gallons, and 3 gallons, and a water faucet.
You can fill the jugs up or empty them out from one to another or onto the ground. You
need to measure out exactly one gallon.

Initial state - jugs are empty
goal test - we have exactly one galone in the jug
successor function - [fill jug from water faucet , pour water from one jug to another, empty jug]
cost function - constant value per step

Exercises 3.12  (4 points)

Uniform cost search and breadth-fisrt search expands nodes according to the cost. Supposing our graph consists of one node and an optimal solution exists we will find it.
Then let us add two more nodes. If an optimal solution exists we will find it because the cost of every step is constant and all the nodes with less costs have been already checked.
Now let us add more nodes. In that way an optimal solution exists on the node N.
Until we find the optimal solution we will not stop our search. If we reach N node then all the nodes before with less cost have been already checked. So N is optimal solution.

If cost value is not constant we can finish not in optimal node.

Exercises 3.17  (4 points)

A) Suppose that actions can have arbitrarily large negative costs; explain why this possi-
bility would force any optimal algorithm to explore the entire state space.

Arbitrarily big negative costs automaticaly create concurent for optimal solution.

B) Does it help if we insist that step costs must be greater than or equal to some negative
constant c? Consider both trees and graphs.

In case of graphs it wouldn't help because we can create loop wich summary cost will be negative.
In case of trees If we find the optimal solution with cost X we don't need to consider sutree with costs greater or equal to X + |d * C| where d is depth of tree because d steps with price C will produce the cost wich is greater than X.

C) Suppose that there is a set of operators that form a loop, so that executing the set in some
order results in no net change to the state. If all of these operators have neg<ative cost,
what does this imply about the optimal behavior for an agent in such an environment?

It is nesessery to continue looping forever becase it decreses the cost function value

D) One can easily imagine operators with high negative cost, even in domain such as route finding.
For example, some stretches of road might have such beautiful scenery
as to far outweigh the normal costs in terms of time and fuel. Explain, in precise terms,
within the context (of state-space search, why humans do not drive round scenic loops
indefinitely, and explain how to define the state space and operators for route ,finding so
that artificial agents can also avoid looping.

According to the fact that resources are limited peolple will no have enough resources for infinite loop.
We expand our states with few parametrs (resources, f.e. money, fuel) and some steps are able to decrease resources. If resources are not enough to reach another state then previous state is the deadlock.

E) Can you think of a real domain in which step costs are such as to cause looping?

Let us define domain with person and celery. Person's hunger makes him eat celery, but celery increases the hunger.

Exercises 4.1  (4 points)

step 1: Lugoj(144, 0, 244)            Fringe = Lugoj(144, 0, 244)
step 2: Mehadia(311, 90, 341)     Fringe = Timsoara(440, 111, 324) Mehadia(311, 90, 341)
step 3: Drobeto(387, 145, 242)    Fringe = Timsoara(440, 111, 324) Drobeto(387, 145, 242)
step 4: Cratova(425, 265, 160)    Fringe = Timsoara(440, 111, 324) Cratova(425, 265, 160)
step 5: Timsoara(440, 111, 324) Fringe = Timsoara(440, 111, 324) Pitesti(503, 403, 100) Rimnicu(604, 411, 193)
step 6: Pitesti(503, 403, 100)      Fringe = Arad(595, 229, 366) Pitesti(503, 403, 100) Rimnicu(604, 411, 193)
step 7: Bucharest(504, 504, 0)    Fringe = Bucharest(504, 504, 0) Arad(595, 229, 366) Rimnicu(604, 411, 193)

Exercises 4.2  (4 points)

Considering:

f(n) = (2 - w) * (g(n) + w/(w - 2) * h(n))

Before h(n) must be no more than 1 to f(n) be admissible.

So that when w = (0, 1] algorithm guaranteed to be optimal becouse it will be weighted variant of A*

when w = 0 it behaves like uniform cost search f(n) = 2 g(n)
when w = 1 it behaves like A* f(n) = g(n) + h(n)
when w = 2 it behaves like Greedy best first search f(n) = 2 h(n)
