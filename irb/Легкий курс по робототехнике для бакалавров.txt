Именно такой фразой начал свой курс <a href="https://www.linkedin.com/pub/evgeni-magid/5/91a/564">Евгений Магид</a>, профессор робототехники в университете Иннополис: 'Курс у меня легкий, обычно его берут, только чтобы кредитов набрать'. Кредит, это кстати, такая единица временной емкости для курса в западной системе образования. И правда, большие семестровые курсы оцениваются в 6 кредитов, в то время как курс по введению в робототехнику читался только половину семестра и стоил всего три кредита. Поэтому мы расслабились и всю первую лекцию провели за обсуждением трех законов робототехники. Законов робототехники на самом деле оказалось четыре. Нулевой закон робототехники гласит: робот не может причинить вред человечеству или своим бездействием допустить, чтобы человечеству был причинён вред. Ничего не предвещало беды.
<habracut>
Настольными книгами курса по совету преподавателя для меня стали: <a href="http://www.petercorke.com/Book.html">Robotics vision and control</a> и <a href="http://www.amazon.com/Introduction-Robotics-Mechanics-Control-Edition/dp/0201543613">Introduction to Robotics: Mechanics and Control</a>

На второй лекции нам рассказали те основы линейной алгебры, которые необходимы для робототехники. Мы вспомнили: <a href="https://ru.wikipedia.org/wiki/Скалярное_произведение">скалярное произведение векторов</a>, <a href="https://ru.wikipedia.org/wiki/Квадратная_матрица">квадратные матрицы и операции над ними </a>, а так же <a href="https://ru.wikipedia.org/wiki/Тригонометрические_функции">основные тригонометрические функции и их первые производные</a>. 
Третья лекция была посвящена базовой кинематике.
Для простоты все объяснения были приведены для мухи.
<img src="//habrastorage.org/files/6d0/b4f/72a/6d0b4f72ad9d40dfa302278ea3e5a86d.png"/>
Итак, положение объекта в пространстве задается тремя координатами.
<img src="//habrastorage.org/files/eb9/7d4/070/eb97d40701d04e67a5f1443dae8cd8a8.png"/>
Как оказалось: не только. Для одних и тех же координат найдется несколько различных положений объекта.
<img src="//habrastorage.org/files/54e/7ec/183/54e7ec183936483692b458bfb47824ea.png"/>
Чтобы задать ориентацию объекта в заданной точке необходимо поместить его в собственную систему координат в точке нахождения и посмотреть - насколько она повернута относительно системы координат точки отсчета. Это отношение между двумя системами координат выражается через матрицу вращения. Чтобы получить матрицу вращения надо разобраться с тем, что любое вращение в пространстве можно представить как последовательное вращение вокруг трех взаимно перпендикулярных осей. 
Таким образом, для того, чтобы задать объект в пространстве нужно задать три пространственных координаты и три угла поворота.
Так же очен важным является представление одного и того же вектора в разных системах координат. Нужно понимать, что физически, это один и тот же вектор и он не меняется от того, с какой стороны мы на него смотрим. А представляется он следующим образом: 
<img src="//habrastorage.org/files/7c2/319/cd8/7c2319cd8f454d8ab121738a6d5c716a.png"/>
То есть, чтобы записать вектор в терминах системы координат А нужно знать матрицу вращения из B в A и умножить ее на координаты вектора в системе B. Нужно понимать, что это работает только если обе системы координат находятся в одной точке и всего лишь повернуты друг относительно друга. 
<img src="//habrastorage.org/files/6f0/134/d49/6f0134d49f5c46538e41392a60cabf9c.png"/>
В случае, когда две системы координат разнесены в пространстве все немногим сложнее.
<img src="//habrastorage.org/files/efe/ea5/0d0/efeea50d079241dc9a86e868df86c376.png"/>
Матрица вращения имеет размерность 3*3, размерность вектора Pborg, который задает расстояние до системы координат B в терминах системы координат А, 3*1. Таким образом, чтобы получить координаты объекта в терминах системы отсчета А, нужно знать матрицу трансляции, размерность которой 4*4.
Практическая часть занятия была посвящена основам работы в Matlab. Мы пробежались по основным структурам данных, синтаксису, операциям над векторами, базовым вычислениям и графике.

После второй лекции мы получили первую домашнюю работу. У нас на нее была рассчитана неделя. Раздолбайскую натуру русского студента уничтожить трудно, даже европейской системой образования. Тот факт, что про домашку я вспомнил в последний день перед дедлайном привел к бессонной ночи и вращению пространства в уме. Однако она была настолько объемной, что пришлось отодвигать дедлайн по ней. Профессор, спокойно к этому отнесся, поэтому в результате практически все в классе научились вращать системы координат в уме и считать матрицы трансляции. Начиная с этой недели мы регулярно просили отсрочить дедлайн по домашней работе на несколько дней, потому что уровень заданий рос, а количество свободного времени уменьшалось, так как приближался конец семестра. Надо отдать должное профессору, он всегда был готов принять просроченные работы. 

На третей лекции мы познавали прямую кинематику. Она позволяет определить положение манипулятора, зная углы, на которые повернуты его части. Мы научились описывать манипуляторы с помощью нотации <a href="https://youtu.be/rA9tm0gTln8">Деннавита-Хаттенберга</a>, переходить от нее к матрицам трансформации и с их помощью переходить от базового фрейма к фрейму end-effector. End-effector это та часть манипулятора, котора непосредственно и выполняет манипуляции с внешним миром. Зная конфигурацию робота мы можем найти матрицу трансформации из базового фрейма во фрейм end-effector. Эта матрица так же будет иметь размерность 4*4, так как это всего лишь некоторое количество перемноженных матриц размера 4*4. Матрица эта зависит только от того, как повернуты углы манипулятора и как сделаны начальные установки (конфигурация робота). Так выглядит матрица трансформации между двумя соседними суставами.
<img src="//habrastorage.org/files/2c2/d23/c1e/2c2d23c1e8fc4c72b27bfbacd206e7ac.png"/>
Параметры r и d задаются конфигурации робота и беруться из представления Деннавита-Хаттенберга. Теперь задаваясь конфигурацией робота мы можем последовательно перемножить все матрицы трансформации для перехода от предыдущего фрейма, начиная с базового, до следующего, заканчивая end-effector мы получаем матрицу трансформации из базовой системы координат в систему координат end-effector. Вектор Pborg взятый из этой матрицы определит нам положение end-effector для заданных углов робота.
Практическая часть занятия была посвящена основам работы в robotics toolbox. Эта замечательный фреймворк для среды matlab, который среди прочего позволяет визуализировать движение кинематических схем.

Четвертая лекция была посвящена обратной кинематике. Задача обратной кинематики состоит в том, чтобы зная позицию и ориентацию end-effector найти такие углы всех суставов манипулятора, которые бы удовлетворяли заданной конфигурации. Подходящих конфигураций может быть несколько: 
<img src="//habrastorage.org/files/f3a/72c/869/f3a72c869fe645ccb7678ed1ca94a46c.png"/>
Чем больше у робота число степеней свободы, тем больше можно найти решений для задачи обратной кинематики. Одновременно с этим, получение этих решений становиться сложнее с каждым новым суставом. В случаях когда трудно найти общее решение задачи обратной кинематики ищут численное решение, минус этого подхода состоит в том, что мы получаем не все решения, а только какое то одно и не точное, а приближенное. Однако, иногда другого выбора просто не остается. Методика решения задачи обратной кинематики сильно зависит от робота. Так например, для робота с n < 6 степенями свободы мы можем сделать это следующим образом. Мы решаем прямую задачу кинематики. Выписываем общий вид матрицы трансформации и пытаемся сопоставить эти две матрицы, получая систему уравнений.
Практическая часть была посвящена платформе YARP. Мы создали простейшее приложение, которые умело объединять несколько портов на чтение и запись. Так же это приложение могло расчитывать задачу обратной кинематики для данного нам на занятии робота. Код можно найти в моем <a href="https://github.com/Aelphy/innopolis/blob/master/irb/hw3/main.cpp">репозитарии</a>.

Пятая лекция была посвящена скоростям и сенсорам. Мы научились переходить от линейных скоростей к скоростям вращения суставов с помощью <a href="https://ru.wikipedia.org/wiki/Якобиан">Якобиана</a>. Теперь мы можем с помощью него описать зависимость между угловыми и линейными скоростями как: <img src="//habrastorage.org/files/a48/9ef/5c4/a489ef5c482f47349658ada127b97f20.png"/>. Понятно, что чтобы найти обратную зависимость нужно взять обратную матрицу. Но это не всего возможно, так как детерминант матрицы может оказаться равным нулю, или же она может оказаться не квадратной. Для таких случаев существует псевдо-обратная матрица, методику расчета которой мы поняли только после того, как решили соответствующую домашнюю работу. Про сенсоры нам прочитали только несколько базовых вещей: типы сенсоров, зачумленные данные и что чем больше разных сенсоров - тем лучше. 

Финалом все курса стал проект. Мы должны были разработать кинематическую схему робота, с 4 или более степенями свободы. В качестве такого робота наша команда решила взять упрощенную модель человеческой ноги закрепленную со стороны бедра. В бедре мы заложили три степени свободы, в колене одну и еще две в голеностопе. С помощью этого упрощения мы смогли решить задачу обратной кинематики аналитически.
// тут фото должно быть 
Затем мы создали модель нашего робота в robotics toolbox и запрограммировали его анимацию, рассчитывая углы суставов робота с помощью решенной обратной задачи кинематики, задавая только точку желаемого нахождения ступни робота.

Хочется отметить, что опыт профессора помог ему выстроить курс таким образом, что каждая следующая тема изящно вытекала из предыдущей и использовала накопленные за курс знания. Все это в совокупности с домашними работами, которые заставляли смотреть на все эти темы с другой - практической точки зрения помогли на мне на финальном экзамене получить высокую оценку.

Иллюстрации были взяты из курса лекций профессора Е. Магида.